{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanticMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d921d555.chunk.js","sourcesContent":["//every request which i send should have the same format beginning\r\n//axios works same as postman\r\n\r\nimport axios from \"axios\";\r\nconst instance=axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","import React, { useState, useEffect } from 'react' \r\nimport axios from './axios'\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url=\"https://image.tmdb.org/t/p/original/\"\r\n\r\nfunction Row( {title, fetchUrl, isLargeRow } ){\r\n    const [movies, setMovies]=useState([]);\r\n    const[trailerUrl,setTrailerUrl]=useState(\"\");\r\n\r\n    // useeffect does as soon as the row loads\r\n    useEffect(()=>{\r\n        //run once when the row loads and dont run it again(if passed an empty arrray [])\r\n\r\n        //we cant run async data in useeffect for doing so we need\r\n        async function fetchData(){\r\n            //await says when u make this request wait for the promise or answer to come back\r\n                const request=await axios.get(fetchUrl);//axios.get function concatenates url with the baseurl provided in axios.js\r\n                // console.table(request.data.results);\r\n                setMovies(request.data.results);\r\n                return request;\r\n        }\r\n        fetchData();\r\n    },[fetchUrl]);  //if we use any variable in useeffect importing from outside of the block we have to write it here like fetchUrl\r\n\r\nconst opts={\r\n    height:\"390\",\r\n    width:\"100%\",\r\n    playerVars:{\r\n        autoplay:1,\r\n    },\r\n};\r\n\r\nconst handleClick=(movie)=>{\r\n    if(trailerUrl){\r\n        setTrailerUrl(' ');\r\n    }\r\n    else{\r\n        movieTrailer(movie?.name || \"\")\r\n        .then((url)=>{\r\n            const urlParams=new URLSearchParams(new URL(url).search);\r\n            setTrailerUrl(urlParams.get('v'));\r\n\r\n        }).catch((error)=>console.log(error));\r\n    }\r\n};\r\n    return(\r\n        <div className=\"row\">\r\n            {/* title */}\r\n                <h2>{title}</h2>\r\n            <div className=\"row_posters\">\r\n                {movies.map(movie=>(\r\n                    <img\r\n                        key={movie.id}  \r\n                        onClick={() =>handleClick(movie)}\r\n                        className={`row_images ${isLargeRow && \"row_imageLarge\"}`}\r\n                        src={`${base_url}${isLargeRow?movie.poster_path:movie.backdrop_path}`} alt={movie.name}/>\r\n                ))}\r\n            </div>\r\n           {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\r\n        </div>\r\n    )\r\n        \r\n    \r\n}\r\nexport default Row","const API_KEY=\"7c9d07a5df8dfddc9727f079debc73cf\";\r\n\r\nconst requests={\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanticMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\nexport default requests;","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Banner.css';\r\n\r\n function Banner(){\r\n    const[movie, setMovie]=useState([]);\r\n\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request=await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                Math.floor(Math.random()*request.data.results.length-1)\r\n                ]\r\n            );  \r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[]);\r\n\r\n    console.log(movie);\r\n\r\n    function truncate(str,n){\r\n        return str?.length>n?str.substr(0,n-1)+\".......\" :str ;\r\n    }\r\n\r\n     return(\r\n         <header className=\"banner\"\r\n            style={{\r\n                backgroundSize:\"cover\",\r\n                backgroundImage:`url(\r\n                    \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n                )`,\r\n                backgroundPosition:\"center center\",\r\n            }}\r\n        >\r\n             <div className=\"banner_contents\">\r\n                   {/* title */}\r\n                   {/* div with 2 button play and my list */}\r\n                   {/* description */}\r\n                <h1 className=\"banner_title\">\r\n                    {/* take care of the edge cases  the app doesnt creash if dont have the movie title, it gets movie name and if not gets original name */}\r\n                    {movie?.title || movie?.name || movie?.original_name} \r\n                </h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                    </div>\r\n                    <h1 className=\"banner_description\">{truncate(movie?.overview,150)}</h1>\r\n            </div>  \r\n            <div className=\"banner-fadeButton\"/>\r\n        </header>\r\n     )\r\n }\r\n export default Banner;","import React, { useEffect, useState } from 'react';\r\nimport './Navbar.css';\r\n\r\nfunction Navbar(){\r\n    const[show,handleShow]=useState([false]);\r\n\r\n    useEffect(()=>{\r\n        window.addEventListener(\"scroll\", ()=>{\r\n            if(window.scrollY>100){\r\n                handleShow(true);\r\n            } else handleShow(false);\r\n        });\r\n        return()=>{\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    },[]);\r\n    return(\r\n        <div className={`nav ${show &&\"nav_black\"}`}>\r\n            <img\r\n                className=\"nav_logo\"\r\n                src=\"https://brand.netflix.com/static/assets/icons/netflix_logo.svg\"\r\n               \r\n            />\r\n            <img\r\n                className=\"nav_avatar\"\r\n                src=\"https://pbs.twimg.com/media/DlKNEufWsAAgr2E.jpg\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport Row from'./Row';\nimport requests from './requests'\nimport Banner from './Banner';\nimport Navbar from './Navbar'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    {/* Navbar */}\n    {/* Banner */}\n    <Navbar/>\n    <Banner/>\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow/>{/*isLargeRow is by default true*/}\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title=\"Romantic Movies\" fetchUrl={requests.fetchRomanticMovies}/>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n//firebase login\n//firebase init\n//firebase deploy\n\n//7c9d07a5df8dfddc9727f079debc73cf\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}